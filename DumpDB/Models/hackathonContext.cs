// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DumpDB.Models
{
    public partial class hackathonContext : DbContext
    {
        public hackathonContext()
        {
        }

        public hackathonContext(DbContextOptions<hackathonContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Bornes> Bornes { get; set; }
        public virtual DbSet<Carrepair> Carrepair { get; set; }
        public virtual DbSet<Chargertype> Chargertype { get; set; }
        public virtual DbSet<Loyalty> Loyalty { get; set; }
        public virtual DbSet<Reservation> Reservation { get; set; }
        public virtual DbSet<User> User { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("utf8mb4_0900_ai_ci")
                .HasCharSet("utf8mb4");

            modelBuilder.Entity<Bornes>(entity =>
            {
                entity.ToTable("bornes");

                entity.Property(e => e.BorneStatus)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.BorneType)
                    .IsRequired()
                    .HasMaxLength(64);

                entity.Property(e => e.ChargerTypeId)
                    .IsRequired()
                    .HasMaxLength(64);

                entity.Property(e => e.Description).HasMaxLength(128);

                entity.Property(e => e.Kwatt).HasColumnName("KWatt");

                entity.Property(e => e.Latitude).HasMaxLength(128);

                entity.Property(e => e.Location)
                    .HasPrecision(64)
                    .HasColumnName("location");

                entity.Property(e => e.Logitude).HasMaxLength(128);

                entity.Property(e => e.Price).HasPrecision(15, 5);
            });

            modelBuilder.Entity<Carrepair>(entity =>
            {
                entity.ToTable("carrepair");

                entity.Property(e => e.Description).HasMaxLength(128);

                entity.Property(e => e.Latitude).HasMaxLength(128);

                entity.Property(e => e.Location).HasMaxLength(128);

                entity.Property(e => e.Longitute).HasMaxLength(128);

                entity.Property(e => e.ServiceOffered).HasMaxLength(256);
            });

            modelBuilder.Entity<Chargertype>(entity =>
            {
                entity.ToTable("chargertype");

                entity.Property(e => e.Id).HasMaxLength(64);

                entity.Property(e => e.ChargerType1)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("ChargerType");

                entity.Property(e => e.ConnectorType)
                    .IsRequired()
                    .HasMaxLength(64);

                entity.Property(e => e.EstimatedTime)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasDefaultValueSql("'0'");
            });

            modelBuilder.Entity<Loyalty>(entity =>
            {
                entity.ToTable("loyalty");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Description).HasMaxLength(128);

                entity.Property(e => e.ImagePath).HasMaxLength(128);
            });

            modelBuilder.Entity<Reservation>(entity =>
            {
                entity.ToTable("reservation");

                entity.Property(e => e.Amount).HasPrecision(15, 5);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UnitPrice).HasPrecision(15, 5);
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("user");

                entity.Property(e => e.AccountNumber).HasMaxLength(64);

                entity.Property(e => e.Brn)
                    .HasMaxLength(64)
                    .HasColumnName("BRN");

                entity.Property(e => e.BusinessName).HasMaxLength(64);

                entity.Property(e => e.Email).HasMaxLength(64);

                entity.Property(e => e.FirstName).HasMaxLength(64);

                entity.Property(e => e.LastName).HasMaxLength(64);

                entity.Property(e => e.MobileNumber)
                    .IsRequired()
                    .HasMaxLength(64);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(64);

                entity.Property(e => e.PointAccumalated).HasDefaultValueSql("'0'");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(64);

                entity.Property(e => e.UserType)
                    .IsRequired()
                    .HasMaxLength(64);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}